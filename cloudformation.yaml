AWSTemplateFormatVersion: 2010-09-09

Parameters:
  isDeployingInEE:
    Description: Set this to true if deploying template in EE. Setting it to false will skip deploying the AppStream 2.0 service role.
    Default: true
    Type: String

Conditions:
  CreateAppStreamRole: !Equals [!Ref isDeployingInEE, "true"]

Mappings:
  RegionMap:
    us-east-1:
      az1: use1-az2
      az2: use1-az4
      az3: use1-az6
    us-west-2:
      az1: usw2-az1
      az2: usw2-az2
      az3: usw2-az3
    eu-west-1:
      az1: euw1-az1
      az2: euw1-az2
    ap-southeast-1:
      az1: apse1-az1
      az2: apse1-az2
      az3: apse1-az3
    ap-southeast-2:
      az1: apse2-az1
      az2: apse2-az2
      az3: apse2-az3
    ap-northeast-2:
      az1: apne2-az1
      az2: apne2-az3

Resources:
  iamAmazonAppStreamServiceAccess:
    Type: AWS::IAM::Role
    Condition: CreateAppStreamRole
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - appstream.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonAppStreamServiceAccess
      MaxSessionDuration: 3600
      Path: /service-role/
      RoleName: AmazonAppStreamServiceAccess

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/20
      Tags:
        - Key: Name
          Value: AppStream 2.0 VPC
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZoneId: !FindInMap [ RegionMap, !Ref 'AWS::Region', az1 ]
      Tags:
        - Key: Name
          Value: AppStream 2.0 public subnet
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZoneId: !FindInMap [ RegionMap, !Ref 'AWS::Region', az1 ]
      Tags:
        - Key: Name
          Value: AppStream 2.0 private subnet 1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZoneId: !FindInMap [ RegionMap, !Ref 'AWS::Region', az2 ]
      Tags:
        - Key: Name
          Value: AppStream 2.0 private subnet 2
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: AppStream2 IGW
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ElasticIP
        - AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: AppStream 2.0 NAT gateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppStream 2.0 public route table
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppStream 2.0 private route table
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  ElasticIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  # Get the latest AppStream 2.0 image
  iamLambdaExecutionRoleGetImage:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: describe-as2-images
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'appstream:DescribeImages'
                Resource: '*'
      MaxSessionDuration: 3600
      Path: /service-role/
      
  fnGetImage:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: python3.11
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def get_latest_image(event, context):
              client = boto3.client('appstream')

              images = client.describe_images(
                  Type='PUBLIC'
              )

              windows_images = [img for img in images['Images'] if img['Platform'] == ('WINDOWS_SERVER_2022')]
              general_purpose_images = [img for img in windows_images if 'Graphics' not in img['Description'] and 'Design' not in img['Description']]
              general_purpose_images.sort(key=lambda x: x['CreatedTime'], reverse=True)
              latest_general_purpose_image = general_purpose_images[0]

              responseData = {}
              
              responseData['LatestImageName'] = latest_general_purpose_image['Name']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      
          def no_op(event, context):
              print(event)
              responseData = {}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

          def lambda_handler(event, context):
              if event['RequestType'] == ('Create' or 'Update'):
                  get_latest_image(event, context)
              else:
                  no_op(event,context)
      Role: !GetAtt iamLambdaExecutionRoleGetImage.Arn
  
  getLatestImage:
    Type: "Custom::get-appstream2-image"
    Properties:
      ServiceToken: !GetAtt fnGetImage.Arn
      ServiceTimeout: 60

  ImageBuilder:
    Type: 'AWS::AppStream::ImageBuilder'
    Properties: 
      AppstreamAgentVersion: LATEST
      DisplayName: Image Builder
      Description: Image builder for AppStream 2.0 hands-on lab
      EnableDefaultInternetAccess: false
      ImageName: !GetAtt getLatestImage.LatestImageName
      InstanceType: stream.standard.medium
      Name: AS2_Lab_ImageBuilder
      VpcConfig: 
        SubnetIds: 
        - !Ref PrivateSubnet1